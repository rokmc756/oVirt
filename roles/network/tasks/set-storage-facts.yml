---
- name: Get Network Interface Names from Prefix of IP Addresses Provided
  set_fact:
    netdev0: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ovirt.net.ipaddr0 ) | map(attribute='device') | first }}"
    netdev2: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ovirt.net.ipaddr2 ) | map(attribute='device') | first }}"


- name: Get IP Address From Provided Network Device Names
  set_fact:
    ipaddr0: "{{ hostvars[inventory_hostname]['ansible_'~netdev0].ipv4.address }}"
    ipaddr2: "{{ hostvars[inventory_hostname]['ansible_'~netdev2].ipv4.address }}"


- name: Set Default Network Device and Address
  set_fact:
    ipaddr: "{{ ipaddr2 }}"
    _ipaddr: "{{ ipaddr2 }}"
    _ipaddr0: "{{ ipaddr0 }}"
    _ipaddr2: "{{ ipaddr2 }}"
    netdev: "{{ netdev2 }}"
    _netdev: "{{ 'ansible_'~ netdev2 }}"
    _netdev0: "{{ 'ansible_'~ netdev0 }}"
    _netdev2: "{{ 'ansible_'~ netdev2 }}"


- name: Get Netmask From Provided Network Device Names
  set_fact:
    netmask0: "{{ ( hostvars[inventory_hostname][_netdev0]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev0]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    netmask2: "{{ ( hostvars[inventory_hostname][_netdev2]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev2]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


- set_fact:
    nfs_network_range0: "{{ hostvars[inventory_hostname][_netdev0]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev0]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev0]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    nfs_network_range2: "{{ hostvars[inventory_hostname][_netdev2]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev2]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev2]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


- set_fact:
    _nfs_network_range: "{{ nfs_network_range2 }}"


- name: Define Fact for NFS Util Package for RHEL/Rocky/CentOS
  set_fact:
    nfs_client_pkg_name: "nfs-utils"
  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" or ansible_distribution == "openSUSE Leap"


- name: Define Fact for NFS Util Package for Ubuntu/Debian
  set_fact:
    nfs_client_pkg_name: "nfs-client"
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

