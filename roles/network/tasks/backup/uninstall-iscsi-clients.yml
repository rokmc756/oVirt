---
- name: Check the Device Name Attached
  shell: |
    iscsiadm -m session -P 3 | grep 'Target\|disk' | grep Attached | awk '{print $4}'
  register: attach_device_name
  ignore_errors: true
- debug: msg={{ attach_device_name.stdout }}


- name: Delete Text File
  file:
    path: "{{ item.value['mount_dir'] }}/test-iscsi01.txt"
    state: absent
  register: delete_iscsi_files
  ignore_errors: true
  with_dict: "{{ _iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ delete_iscsi_files }}


- name: Unmount the Partition and Remove Entry in /etc/fstab
  mount:
    path: "{{ item.value['mount_dir'] }}"
    state: "unmounted"
  register: unmount_partition
  ignore_errors: true
  with_dict: "{{ _iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ unmount_partition }}


- name: Unmount the Partition and Remove Entry in /etc/fstab
  mount:
    path: "{{ item.value['mount_dir'] }}"
    state: "absent"
  register: remove_fstab_entry
  ignore_errors: true
  with_dict: "{{ _iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ remove_fstab_entry }}


- name: Delete Directory for iSCSI Connection
  file:
    path: "{{ item.value['mount_dir'] }}"
    state: absent
  register: delete_directory
  ignore_errors: true
  with_dict: "{{ _iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ delete_directory }}


# Remove a partition from iscsi disk
- parted:
    device: "/dev/{{ attach_device_name.stdout }}"
    number: "1"
    state: absent
  register: delete_partition
  ignore_errors: true
- debug: msg={{ delete_partition }}


- name: Uninstall Parted
  package:
    name: parted
    state: absent
  register: uninstall_parted
  ignore_errors: true
- debug: msg={{ uninstall_parted }}
# command: cat /proc/partitions


- name: Confirm the Established Session
  command: iscsiadm -m session -o show
  register: confirm_established_session
  ignore_errors: true
- debug: msg={{ confirm_established_session }}


- name: Kill iSCSI Session
  command: |
    iscsiadm --mode node -T {{ item.value['mutual_id'] }} -p {{ item.value['target_ip'] }}:3260 -u
  register: kill_iscsi_session
  ignore_errors: true
  with_dict: "{{ _iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ kill_iscsi_session }}


- name: Remove Node to Prevent the Session from Re-Establishing
  command: |
    iscsiadm --mode node -o delete -T {{ item.value['mutual_id'] }}
  register: remove_node_session
  ignore_errors: true
  with_dict: "{{ _iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ remove_node_session }}
# command: iscsiadm -m session


- name: Delete iSCSI Session Directory to Prevent Re-Establish Connection
  file:
    path: "/var/lib/iscsi/nodes/{{ item.value['mutual_id'] }}"
    state: absent
  register: delete_iscsi_session_directory
  ignore_errors: true
  with_dict: "{{ _iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ delete_iscsi_session_directory }}


# Check the filesystem to ensure that not try to re-establish the connection on future boot operation
# ls /var/lib/iscsi/nodes/{{ item.value['mutual_id'] }}
#
# Identify the sessions that are still open:
# iscsiadm -m session
#
# Find the one with unitrends.dpu in it.
# Then run iscsiadm -m node -T <iqn> -p <ip address>:<port number> -u


- name: Stop and Disable iSCSId
  systemd:
    name: iscsid
    state: stopped
  register: stop_iscsid
  ignore_errors: true
  until: stop_iscsid is succeeded
  retries: 3
  delay: 10
- debug: msg={{ stop_iscsid }}


- name: Delete Config Files of iSCSI Initiator
  file:
    path: "{{ item }}"
    state: absent
  register: delete_iscsi_initator_config_files
  ignore_errors: true
  with_items:
    - "/etc/iscsi/iscsid.conf"
    - "/etc/iscsi/initiatorname.iscsi"
- debug: msg={{ delete_iscsi_initator_config_files }}


- name: Uninstall iSCSI Initiator
  package:
    name: "{{ iscsi_init_pkg_name }}"
    state: absent
  register: uninstall_iscsi_initiator
  ignore_errors: true
- debug: msg={{ uninstall_iscsi_initiator }}
  when: print_debug == true

