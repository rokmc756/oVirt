---
- name: Get Network Interface Names from Prefix of IP Addresses Provided
  set_fact:
    netdev0: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ovirt.net.ipaddr0 ) | map(attribute='device') | first }}"
    netdev2: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ovirt.net.ipaddr2 ) | map(attribute='device') | first }}"
    # netdev1: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _okd.net.ipaddr1 ) | map(attribute='device') | first }}"


- name: Get IP Address From Provided Network Device Names
  set_fact:
    ipaddr0: "{{ hostvars[inventory_hostname]['ansible_'~netdev0].ipv4.address }}"
    ipaddr2: "{{ hostvars[inventory_hostname]['ansible_'~netdev2].ipv4.address }}"
    # ipaddr1: "{{ hostvars[inventory_hostname]['ansible_'~netdev1].ipv4.address }}"


- name: Set Default Network Device and Address
  set_fact:
    netdev: "{{ netdev2 }}"
    ipaddr: "{{ ipaddr2 }}"
    _netdev0: "{{ 'ansible_'~ netdev0 }}"
    _netdev2: "{{ 'ansible_'~ netdev2 }}"
    _netdev: "{{ 'ansible_'~ netdev2 }}"
    _ipaddr: "{{ ipaddr2 }}"


#- name: Get Netmask From Provided Network Device Names
#  set_fact:
#    netmask0: "{{ ( hostvars[inventory_hostname][_netdev0]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev0]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
#    netmask2: "{{ ( hostvars[inventory_hostname][_netdev2]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev2]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    # netmask1: "{{ ( hostvars[inventory_hostname][_netdev1]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev1]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


- name: Get Netmask From Provided Network Device Names
  set_fact:
    netmask0: "{{ ( hostvars[inventory_hostname][_netdev0]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev0]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    netmask2: "{{ ( hostvars[inventory_hostname][_netdev2]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev2]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    _netmask: "{{ ( hostvars[inventory_hostname][_netdev2]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev2]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    # netmask1: "{{ ( hostvars[inventory_hostname][_netdev1]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev1]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


- set_fact:
    nfs_network_range0: "{{ hostvars[inventory_hostname][_netdev0]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev0]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev0]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    nfs_network_range2: "{{ hostvars[inventory_hostname][_netdev2]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev2]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev2]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    _nfs_network_range: "{{ hostvars[inventory_hostname][_netdev2]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev2]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev2]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    # nfs_network_range1: "{{ hostvars[inventory_hostname][_netdev1]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev1]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev1]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


# https://stackoverflow.com/questions/36328907/ansible-get-all-the-ip-addresses-of-a-group
#- name: Define Facts for All Worker's Hostname
#  set_fact:
#    all_ext1_hostnames: "{{ groups['all'] | map('extract', hostvars, ['ansible_hostname']) | join(' ') }}"
#- debug: msg={{ all_ext1_hostnames }}

#
#- name: Define Fact for All Worker's First IP Address
#  set_fact:
#    all_net0_ipaddrs: "{{ groups['all'] | map('extract', hostvars, ['ansible_'~netdev0, 'ipv4', 'address']) | join(',') }}"
#- debug: msg={{ all_net0_ipaddrs }}


- set_fact:
    nfs_client_pkg_name: "nfs-utils"
  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" or ansible_distribution == "openSUSE Leap"


- set_fact:
    nfs_client_pkg_name: "nfs-client"
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

