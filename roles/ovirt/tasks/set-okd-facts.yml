---
- name: Get Network Interface Names from Prefix of IP Addresses Provided for Kubernetes Nodes
  set_fact:
    netdev0: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _okd.net.ipaddr0 ) | map(attribute='device') | first }}"
    netdev2: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _okd.net.ipaddr2 ) | map(attribute='device') | first }}"
    # netdev1: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _okd.net.ipaddr1 ) | map(attribute='device') | first }}"


- name: Get IP Address From Provided Network Device Names
  set_fact:
    ipaddr0: "{{ hostvars[inventory_hostname]['ansible_'~netdev0].ipv4.address }}"
    ipaddr2: "{{ hostvars[inventory_hostname]['ansible_'~netdev2].ipv4.address }}"
    # ipaddr1: "{{ hostvars[inventory_hostname]['ansible_'~netdev1].ipv4.address }}"


- name: Set Default Network Device and Address
  set_fact:
    netdev: "{{ netdev2 }}"
    ipaddr: "{{ ipaddr2 }}"
    _netdev: "{{ 'ansible_'~ netdev2 }}"
    _ipaddr: "{{ ipaddr2 }}"


- name: Get Manager Manager IP Address
  set_fact:
    manager_ipaddr: "{{ hostvars[inventory_hostname][_netdev].ipv4.address }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['all'] }}"
  when: inventory_hostname in groups['manager']


- name: Define OKD Version
  set_fact:
    okd_version: "{{ _okd.major_version }}.{{ _okd.minor_version }}.{{ _okd.patch_version }}-{{ _okd.build_version }}-{{ _okd.release_date }}"


# https://stackoverflow.com/questions/36328907/ansible-get-all-the-ip-addresses-of-a-group
#- name: Define Facts for All Worker's Hostname
#  set_fact:
#    all_ext1_hostnames: "{{ groups['all'] | map('extract', hostvars, ['ansible_hostname']) | join(' ') }}"
#- debug: msg={{ all_ext1_hostnames }}

#
#- name: Define Fact for All Worker's First IP Address
#  set_fact:
#    all_net0_ipaddrs: "{{ groups['all'] | map('extract', hostvars, ['ansible_'~netdev0, 'ipv4', 'address']) | join(',') }}"
#- debug: msg={{ all_net0_ipaddrs }}


#- set_fact:
#    rh_install_pks: "{{ rh_common_pkgs ~ ',' ~ rh_common_devel_pkgs  ~ ',' ~ rh7_common_devel_pkgs }}"
#  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int <= 7
#- set_fact:
#    rh_install_pkgs: "{{ rh_common_pkgs ~ ',' ~ rh_common_devel_pkgs  ~ ',' ~ rh8_common_devel_pkgs }}"
#  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int == 8
#- set_fact:
#    rh_install_pkgs: "{{ rh_common_pkgs ~ ',' ~ rh_common_devel_pkgs  ~ ',' ~ rh9_common_devel_pkgs }}"
#  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int >= 9
#- set_fact:
#    install_pkgs: "{{ rh_install_pkgs }}"
#  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )


#- set_fact:
#    ubt_install_pkgs: "{{ ubt_common_pkgs ~ ',' ~ ubt_common_devel_pkgs  ~ ',' ~ ubt20_common_devel_pkgs }}"
#  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int <= 20
#- set_fact:
#    ubt_install_pkgs: "{{ ubt_common_pkgs ~ ',' ~ ubt_common_devel_pkgs  ~ ',' ~ ubt22_common_devel_pkgs }}"
#  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int == 22
#- set_fact:
#    ubt_install_pkgs: "{{ ubt_common_pkgs ~ ',' ~ ubt_common_devel_pkgs  ~ ',' ~ ubt23_common_devel_pkgs }}"
#  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int >= 23
#- set_fact:
#    install_pkgs: "{{ ubt_install_pkgs }}"
#  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" )


#- set_fact:
#    suse_install_pkgs: "{{ suse_common_pkgs ~ ',' ~ suse_common_devel_pkgs  ~ ',' ~ suse15_common_devel_pkgs }}"
#  when: ansible_distribution == "openSUSE Leap" and ansible_distribution_major_version|int <= 15
#- set_fact:
#    install_pkgs: "{{ suse_install_pkgs }}"
#  when: ansible_distribution == "openSUSE Leap"


# Define Variables for Docker Packages of each Linux Distributions
#
#- set_fact:
#    update_repo_cache: "dnf makecache"
#    docker_pkgs: "{{ rh_docker_pkgs }}"
#    lock_kube_cmds: "yum versionlock kubelet kubeadm kubectl"
#    unlock_kube_cmds: "yum versionlock clear kubelet kubeadm kubectl"
#  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )
#
#- set_fact:
#    update_repo_cache: "apt update"
#    docker_pkgs: "{{ ubt_docker_pkgs }}"
#    lock_kube_cmds: "apt-mark hold kubelet kubeadm kubectl"
#    unlock_kube_cmds: "apt-mark unhold kubelet kubeadm kubectl"
#  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" )
#
#- set_fact:
#    update_repo_cache: "zypper refresh -B"
#    docker_pkgs: "{{ suse_docker_pkgs }}"
#    lock_kube_cmds: "zypper addlock kubelet kubeadm kubectl"
#    unlock_kube_cmds: "zypper removelock kubelet kubeadm kubectl"
#  when: ansible_distribution == "openSUSE Leap"


#- set_fact:
#    cni_mtu: "{{ _okd.cni.calico.vxlan.mtu }}"
#  when: _okd.cni.calico.install == true and _okd.cni.calico.vxlan.enable == true
#- set_fact:
#    cni_mtu: "{{ _okd.cni.calico.ipip.mtu }}"
#  when: _okd.cni.calico.install == true and _okd.cni.calico.ipip.enable == true
#- set_fact:
#    cni_mtu: "{{ _okd.cni.tigera.vxlan.mtu }}"
#  when: _okd.cni.tigera.install == true and _okd.cni.tigera.vxlan.enable == true
#- set_fact:
#    cni_mtu: "{{ _okd.cni.tigera.ipip.mtu }}"
#  when: _okd.cni.tigera.install == true and _okd.cni.tigera.ipip.enable == true
#- set_fact:
#    cni_mtu: "{{ _okd.cni.kube_flannel.mtu }}"
#  when: _okd.cni.kube_flannel.install == true


#- block:
#  - hosts: localhost
#    gather_facts: no
#    connection: local
#    tasks:
#      - name: Display destinationFile contents
#        command: cat "/home/jomoon/secret-infos/okd-pull-secret.key"
#        register: okd_pull_secret
#      - debug: "{{ okd_pull_secret.stdout }}"
#      # become_user: "{{ SSH_USER }}"


#    - command: /root/complex_script.sh
#      register: result
#    - set_fact:
#        my_server_list: "{{ hostvars|json_query('*.result.stdout') }}"
#      run_once: true
#      delegate_to: localhost
#      delegate_facts: true


- name: Get OKD Pull Secret
  command: cat {{ _okd.local_home_dir }}/secret-infos/okd-pull-secret.key
  register: okd_pull_secret
  delegate_to: localhost
  delegate_facts: true
  when: inventory_hostname in groups['manager']


- name: Get Local SSH Key Secret
  command: cat {{ _okd.local_home_dir }}/.ssh/id_rsa.pub
  register: local_ssh_key_secret
  delegate_to: localhost
  delegate_facts: true
  when: inventory_hostname in groups['manager']


- name: Get Manager SSH Key Secret
  command: cat {{ _okd.base_path }}/.ssh/id_rsa.pub
  register: mgr_ssh_key_secret
  when: inventory_hostname in groups['manager']


- set_fact:
    okd_pull_secret: "{{ okd_pull_secret.stdout | string }}"
    local_ssh_key_secret: "{{ local_ssh_key_secret.stdout | string }}"
    mgr_ssh_key_secret: "{{ mgr_ssh_key_secret.stdout  }}"
  when: inventory_hostname in groups['manager']

