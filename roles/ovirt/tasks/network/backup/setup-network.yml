---
- name: Install DNSMaq Package
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "bind-utils"
    - "systemd-resolved"
  #  - "dnsmasq"


- name: Add Required Settings for OKD Cluster to Dnsmasq
  lineinfile:
    dest: "{{ item.file_name }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  register: add_required_config
  with_items:
    - { file_name: "/etc/systemd/resolved.conf",  regexp: "^#DNS=",  line: "DNS=192.168.0.199 8.8.8.8",  state: present }
    # - { file_name: "/etc/dnsmasq.conf",  regexp: "^#address=/double-click.net/127.0.0.1",  line: "address=/apps.{{ _okd.domain }}/{{ manager_ipaddr }}",  state: present }
    # - { file_name: "/etc/dnsmasq.conf",  regexp: "^#domain=example.com",  line: "domain={{ _okd.domain }}",  state: present }


# Change DNS setting
# Replace device name or IP address to your environment
- name: CHange DNS Settings
  shell: |
    export DNS=$(nmcli device show {{ item.netdev_name }} | grep ^IP4.DNS | awk '{print $2}')
    nmcli connection modify {{ item.conn_name }} ipv4.dns "$DNS"
    nmcli connection modify {{ item.conn_name }} ipv4.dns-search "{{ okd.domain }}"
    nmcli connection up {{ item.conn_name }}
  register: config_dns_settings
  with_items:
    - { dev_ip_addr: "{{ ipaddr0 }}", netdev_name: "{{ netdev0 }}", conn_name: conn1 }
    - { dev_ip_addr: "{{ ipaddr2 }}", netdev_name: "{{ netdev2 }}", conn_name: conn3 }
- debug: msg={{ config_dns_settings }}
  when: print_debug == true
  # nmcli connection modify {{ item.conn_name }} ipv4.dns "{{ manager_ipaddr1 }} $DNS"


#- name: Configure DNSMasq Server
#  lineinfile:
#    dest: "/etc/resolv.conf"
#    line: "nameserver 127.0.0.1"
#    insertafter: '^search*'
#    state: present
#  register: config_dnsmasq_server


- name: Restart DNSMasq and Systemd Resolved Services
  systemd:
    name: "{{ item.service }}"
    state: "{{ item.state }}"
    enabled: true
    daemon_reload: true
  register: start_service
  until: start_service is succeeded
  retries: 10
  delay: 10
  with_items:
    - { service: systemd-resolved, state: started }
- debug: msg={{ start_service }}
  when: print_debug == true
# - { service: dnsmasq, state: restarted }

